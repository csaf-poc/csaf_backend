from app import db
from app.models.score import ScoreModel


VulnerabilityScoreAssociation = db.Table(
    'vulnerability_score_association',
    db.Column(
        'vulnerability_id',
        db.Integer,
        db.ForeignKey('vulnerability_model._id'),
        primary_key=True
    ),
    db.Column(
        'score_id',
        db.Integer,
        db.ForeignKey('score_model._id'),
        primary_key=True
    )
)


class VulnerabilityModel(db.Model):
    
    scores = db.relationship(
        'ScoreModel',
        secondary=VulnerabilityScoreAssociation,
        lazy='subquery',
        backref=db.backref('vulnerabilities', lazy=True)
    )

    def __repr__(self):
        return '<Vuln "{}">'.format('TODO')

    def from_dict(self, data):
        if 'scores' in data:
            # Add scores
            if data['scores'] is not None:
                for s in data['scores']:
                    score = ScoreModel()
                    # Remove duplicate products
                    s['products'] = list(dict.fromkeys(s['products']))
                    setattr(score, 'score', s)
                    self.scores.append(score)
            # Delete scores
            else:
                self.scores.clear()
